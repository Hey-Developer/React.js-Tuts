# React JSX
> As we have already seen that, all of the React components have a render function. The render function specifies the HTML output of a React component.

> JSX(JavaScript Extension), is a React extension which allows writing JavaScript code that looks like HTML. In other words, JSX is an HTML-like syntax used by React that extends ECMAScript so that HTML-like syntax can co-exist with JavaScript/React code. 

> The syntax is used by preprocessors (i.e., transpilers like babel) to transform HTML-like syntax into standard JavaScript objects that a JavaScript engine will parse.

> JSX provides you to write HTML/XML-like structures (e.g., DOM-like tree structures) in the same file where you write JavaScript code, then preprocessor will transform these expressions into actual JavaScript code. Just like XML/HTML, JSX tags have a tag name, attributes, and children.

# JSX Attributes:

> JSX use attributes with the HTML elements same as regular HTML. JSX uses camelcase naming convention for attributes rather than standard naming convention of HTML such as a class in HTML becomes className in JSX because the class is the reserved keyword in JavaScript. We can also use our own custom attributes in JSX. For custom attributes, we need to use data- prefix. In the below example, we have used a custom attribute data-demoAttribute as an attribute for the <p> tag.

import React, { Component } from 'react';  
class App extends Component{  
   render(){  
      return(  
         <div>  
             <h1>JavaTpoint</h1>  
           <h2>Training Institutes</h2>  
             <p data-demoAttribute = "demo">This website contains the best CS tutorials.</p>  
         </div>  
      );  
   }  
}  
export default App;  

# In JSX, we can specify attribute values in two ways:

~1.As String Literals: We can specify the values of attributes in double quotes:
var element = <h2 className = "firstAttribute">Hello JavaTpoint</h2>;  

~2.As Expressions: We can specify the values of attributes as expressions using curly braces {}:
var element = <h2 className = {varName}>Hello JavaTpoint</h2>;  

import React, { Component } from 'react';  
class App extends Component{  
   render(){  
      return(  
         <div>  
            <h1 className = "hello" >{25+20}</h1>  
         </div>  
      );  
   }  
}  
export default App;  

# JSX Comments:
> JSX allows us to use comments that begin with /* and ends with */ and wrapping them in curly braces {} just like in the case of JSX expressions. 

import React, { Component } from 'react';  
class App extends Component{  
   render(){  
      return(  
         <div>  
            <h1 className = "hello" >Hello JavaTpoint</h1>  
        {/* This is a comment in JSX */}   
         </div>  
      );  
   }  
}  
export default App;  

# JSX Styling:
> React always recommends to use inline styles. To set inline styles, you need to use camelCase syntax. React automatically allows appending px after the number value on specific elements.

import React, { Component } from 'react';  
class App extends Component{  
   render(){  
     var myStyle = {  
         fontSize: 80,  
         fontFamily: 'Courier',  
         color: '#003300'  
      }  
      return (  
         <div>  
            <h1 style = {myStyle}>www.javatpoint.com</h1>  
         </div>  
      );  
   }  
}  
export default App;  